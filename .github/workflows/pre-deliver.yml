
name: Issue branch status check

# Controls when the workflow will run
on:
  push:
    branches-ignore: [ "main" ]
  workflow_dispatch:
    inputs:
      bypass:
        type: choice
        description: Bypass Unittests
        required: true
        default: 'No'
        options: 
        - 'No'
        - 'Yes'
         

jobs:
  pre_deliver:
    runs-on: ubuntu-latest

    permissions:
      contents: read
      statuses: write
      

    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Fetch all branches so we can query the merge base to main


      - name: Set up Python 3.12
        uses: actions/setup-python@v3
        with:
          python-version: "3.12"

      - name: Install uv and loading dependencies
        run: |
          curl -LsSf https://astral.sh/uv/install.sh | sh
          uv venv
          . .venv/bin/activate
          uv sync --extra dev
      
      - name: Run unittests
        id: unittests
        run: |
          if [ "${{ github.event.inputs.bypass }}" == "Yes" ]; then
            echo '>[!WARNING]'                           >> $GITHUB_STEP_SUMMARY
            echo '>Bypassing unittests'                  >> $GITHUB_STEP_SUMMARY
            echo '>Forcing unittests status = `success`' >> $GITHUB_STEP_SUMMARY            
          else
            . .venv/bin/activate
            pytest --cov=. --cov-config=.coveragerc -m unittest
            coverage xml -o coverage.xml
          fi

      - name: Create Code Coverage Summary
        if: ${{ github.event.inputs.bypass != 'Yes' }}
        uses: irongut/CodeCoverageSummary@v1.3.0
        with:
          filename: coverage.xml
          badge: true
          format: markdown
          output: both

      - name: Add Coverage Summary to GitHub Step Summary
        if: ${{ github.event.inputs.bypass != 'Yes' }}
        run: |
          cat code-coverage-results.md >> $GITHUB_STEP_SUMMARY
  
      - name: Get unittest status
        id: get_unittest_status
        run: |
          if [ "${{ github.event.inputs.bypass }}" == "Yes" ]; then
            echo "Bypass is set to Yes"
            echo "status=success"                              >> $GITHUB_OUTPUT
            echo "description=WARNING: Unittests are bypassed" >> $GITHUB_OUTPUT
          else
            if [ "${{ steps.unittests.outcome }}" == "success" ]; then
              echo "Tests passed"
              echo "status=success" >> $GITHUB_OUTPUT
              echo "description=All tests passed and threshold on line covearage reached" >> $GITHUB_OUTPUT
            else
              echo "Tests failed"
              echo "status=failure" >> $GITHUB_OUTPUT
              echo "description=Some tests failed or threshold on line covearage not reached" >> $GITHUB_OUTPUT
            fi
          fi

      - name: Set Unittest status
        run: |

          gh api \
            --method POST \
            -H "Accept: application/vnd.github+json" \
            -H "X-GitHub-Api-Version: 2022-11-28" \
            /repos/${{ github.repository }}/statuses/${{ github.sha }} \
            -f "state=${{ steps.get_unittest_status.outputs.status }}" \
            -f "target_url=${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}" \
            -f "description=${{ steps.get_unittest_status.outputs.description }}" \
            -f "context=Unittest"
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Get ff-only status
        id: ff_only_status
        run: |

          # echo all exections to the console
          set -x

          # Set the default assumptions branch
          DEFAULT_BRANCH="main"
          REMOTE="origin"

          # Get the name of the current branch
          BRANCH_NAME=$(git rev-parse --abbrev-ref HEAD)

          # Get the merge base between the current branch and the default branch (main)
          MERGEBASE=$(git merge-base $BRANCH_NAME $REMOTE/$DEFAULT_BRANCH)

          # Get the SHA1 of the last commit on the default branch
          DEFAULT_BRANCH_SHA1=$(git rev-parse $REMOTE/$DEFAULT_BRANCH)

          # Check if the current branch is ahead of the default branch
          if [ $MERGEBASE != $DEFAULT_BRANCH_SHA1 ]; then
            echo "The current branch is not up-to-date with the default branch"
            echo "status=failure" >> $GITHUB_OUTPUT
            echo 'description=Rebase to `origin/main` needed' >> $GITHUB_OUTPUT
          else
            echo "The current branch is up-to-date with the default branch"
            echo "status=success" >> $GITHUB_OUTPUT
            echo 'description=Merge to `origin/main` will be Fast forward' >> $GITHUB_OUTPUT
          fi

      - name: Set fast forward status
        run: |
          gh api \
            --method POST \
            -H "Accept: application/vnd.github+json" \
            -H "X-GitHub-Api-Version: 2022-11-28" \
            /repos/${{ github.repository }}/statuses/${{ github.sha }} \
            -f "state=${{ steps.ff_only_status.outputs.status }}" \
            -f "target_url=${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}" \
            -f "description=${{ steps.ff_only_status.outputs.description }}" \
            -f "context=Fast Forward"
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Get commit count on branch
        id: commit_count_status
        run: |

          # echo all exections to the console
          set -x

          # Set the default assumptions branch
          DEFAULT_BRANCH="main"
          REMOTE="origin"

          # Get the name of the current branch
          BRANCH_NAME=$(git rev-parse --abbrev-ref HEAD)

          # Get the commit count on the current branch since origin/main
          COMMIT_COUNT=$(git rev-list --count $BRANCH_NAME ^$REMOTE/$DEFAULT_BRANCH)

          # succes if commit count is 1 - else failure
          if [ $COMMIT_COUNT -eq 0 ]; then
            echo "status=success" >> $GITHUB_OUTPUT
            echo "description=This commit is on main" >> $GITHUB_OUTPUT
          elif [ $COMMIT_COUNT -eq 1 ]; then
            echo "status=success" >> $GITHUB_OUTPUT
            echo "description=Only one commit on branch" >> $GITHUB_OUTPUT
          else
            echo "status=failure" >> $GITHUB_OUTPUT
            echo "description=More than one commit on branch ($COMMIT_COUNT)" >> $GITHUB_OUTPUT
          fi

      - name: Set commit count status
        run: |
          gh api \
            --method POST \
            -H "Accept: application/vnd.github+json" \
            -H "X-GitHub-Api-Version: 2022-11-28" \
            /repos/${{ github.repository }}/statuses/${{ github.sha }} \
            -f "state=${{ steps.commit_count_status.outputs.status }}" \
            -f "target_url=${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}" \
            -f "description=${{ steps.commit_count_status.outputs.description }}" \
            -f "context=Commit count"
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Check commit message
        id: commit_message_status
        run: |

          # echo all exections to the console
          set -x

          # Get the integer part of the beginning of the branch name
          ISSUE_NUMBER=$(git rev-parse --abbrev-ref HEAD | grep -o -E '^[0-9]+')

          # Get the commit message from the HEAD of the current branch
          COMMIT_MESSAGE=$(git show -s --format=%B)

          # Check if the commit message contains on of the keywords (close|closes|closed|fix|fixes|fixed|resolve|resolves|resolved) followed by #<issue>

          if echo $COMMIT_MESSAGE | grep -q -E "(close|closes|closed|fix|fixes|fixed|resolve|resolves|resolved)\W+#$ISSUE_NUMBER"; then
            echo "status=success" >> $GITHUB_OUTPUT
            echo "description=Commit message contains '(close|closes|closed|fix|fixes|fixed|resolve|resolves|resolved) #$ISSUE_NUMBER'" >> $GITHUB_OUTPUT
          else
            echo "status=failure" >> $GITHUB_OUTPUT
            echo "description=Commit message does not contain '(close|closes|closed|fix|fixes|fixed|resolve|resolves|resolved) #$ISSUE_NUMBER'" >> $GITHUB_OUTPUT
          fi

      - name: Set commit message status
        run: |
          gh api \
            --method POST \
            -H "Accept: application/vnd.github+json" \
            -H "X-GitHub-Api-Version: 2022-11-28" \
            /repos/${{ github.repository }}/statuses/${{ github.sha }} \
            -f "state=${{ steps.commit_message_status.outputs.status }}" \
            -f "target_url=${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}" \
            -f "description=${{ steps.commit_message_status.outputs.description }}" \
            -f "context=Commit message"
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
    
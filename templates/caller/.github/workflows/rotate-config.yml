name: Rotate  (Dispatch Trigger)

on:
  # This is the 'dev' configuration
  # trigger on push to main
  push:
    branches:
      - main

  # This is the 'qa' configuration
  # trigger on a SEMVER tag with a `rc` (release candidate) suffix /\d+\.\d+\.\d+\.rc/
  # Examples 10.2.3rc, 1.20.3rc, 1.2.30rc, 10.20.30rc 

  # NOTE: RegExp aren't supported in github's glob syntax neither is + only the wildcard * 
  # (which also supports none) and the . is a literal '.' â€” so the final construct is a bit verbose  ...but it works
    tags:
      - '[0-9].[0-9].[0-9]rc'
      - '[0-9][0-9]*.[0-9][0-9]*.[0-9][0-9]*rc' 

  # This is the 'prod' configuration
  # trigger on a SEMVER tag with no suffix /\d+\.\d+\.\d+/
  # Examples 10.2.3, 1.20.3, 1.2.30, 10.20.30
      - '[0-9].[0-9].[0-9]'
      - '[0-9][0-9]*.[0-9][0-9]*.[0-9][0-9]*'   

permissions:
  actions: write
  
jobs:
  create-manifest:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout the repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          ref: main
      
      - name: Ensure Python
        # assume python3 is installed, it is in ubuntu-latest, 
        # but if you are using a different image, you may need to install it
        run: |
          command -v python3 || { echo "Python3 is not installed"; exit 1; }

      - name: Install gh extension 'thetechcollective/rotator'
        # Visit https://github.com/thetechcollective/gh-rotator for more information
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          gh extension install thetechcollective/gh-rotator


      - name: trigger the config rotator on the product repo
        env:
          GITHUB_TOKEN: ${{ secrets.ROTATOR_TOKEN }}
        run: |

          # Determine which configuration triggered this workflow
          CONFIGURATION=""
          if [[ "${{ github.ref_type }}" == "branch" && "${{ github.ref_name }}" == "main" ]]; then
            CONFIGURATION="dev"
          elif [[ "${{ github.ref_type }}" == "tag" && "${{ github.ref_name }}" =~ .*rc$ ]]; then
            CONFIGURATION="qa"
          elif [[ "${{ github.ref_type }}" == "tag" ]]; then
            CONFIGURATION="prod"
          fi

          echo "Configuration: $CONFIGURATION".                                   >> $GITHUB_STEP_SUMMARY
          echo "Triggering repository: ${{ github.repository }}"                  >> $GITHUB_STEP_SUMMARY
          echo "Triggering event: ${{ github.ref_type }}:${{ github.ref_name }}"  >> $GITHUB_STEP_SUMMARY
          echo "Triggering SHA: ${{ github.sha }}"                                >> $GITHUB_STEP_SUMMARY

          # trigger the config rotator on the product repo
          # the PRODUCT_REPO is the repo that contains the product-rotator.json
          # the PRODUCT_WORKFLOW is the workflow that will be triggered
          # the PRODUCT_BRANCH is the branch that will be used to trigger the workflow
          # You should change the PRODUCT_REPO variable to your own product repo - the rest of the command stays the same

          PRODUCT_REPO=config-rotator/product-sample
          PRODUCT_WORKFLOW=.github/workflows/rotator.yml
          PRODUCT_BRANCH=main

          echo "On repository: $PRODUCT_REPO"                             >> $GITHUB_STEP_SUMMARY
          gh workflow run ${PRODUCT_WORKFLOW} --repo ${PRODUCT_REPO} --ref ${PRODUCT_BRANCH} -f repo=${{ github.repository }} -f event_name=${{ github.ref_name }} -f sha=${{ github.sha }} -f event_type=${{ github.ref_type }} 

          echo "See https://github.com/${PRODUCT_REPO}/actions/workflows/${PRODUCT_WORKFLOW}"  >> $GITHUB_STEP_SUMMARY
